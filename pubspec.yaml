name: dipantau_desktop_client
description: Dipantau project for desktop client

# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.1.3+6

environment:
  sdk: '>=3.0.3 <4.0.0'

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter

  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.2

  # This plugin allows Flutter desktop apps to resizing and repositioning the window.
  window_manager: ^0.2.9

  # A powerful HTTP client for Dart, which supports interceptors, form-data, request cancellation
  # file downloading, timeout, etc.
  dio: ^5.2.1+1

  # Flutter widget that make it easy to implement the BLoC design pattern.
  flutter_bloc: ^8.1.1

  # Custom event transformers inspired by ember concurrency.
  # Built to be used with the bloc state management package.
  bloc_concurrency: ^0.2.2

  # Package provides internationalized and localized messages, including message translation,
  # plurals and genders, date/number formatting and parsing, and bidirectional text.
  intl: ^0.18.0

  # Simple direct service locator that allows to decouple the interface from a concrete
  # implementation and to access the concrete implementation from everywhere in your app.
  get_it: ^7.6.0

  # Functional programming in Dart.
  dartz: ^0.10.1

  # An abstract class that helps to implement equality without needing to explicitly
  # override == and hashCode.
  equatable: ^2.0.5

  # Flutter plugin for reading and writing key-value pairs.
  shared_preferences: ^2.0.15

  # Easy and fast internationalizing and localization your flutter apps.
  easy_localization: ^3.0.1

  # The typesafe, reactive and lightweight SQLite abstraction.
  floor: ^1.4.2

  # Flutter plugin for discovering the state of the network (WiFi & mobile/cellular)
  connectivity_plus: ^3.0.2

  # A predictable state management library that helps implement the
  # BLoC design pattern.
  bloc: ^8.1.0

  # Classes and helper functions that support JSON code generation via the `json_serializable` package.
  json_annotation: ^4.8.1

  # A declarative router for Flutter based on Navigation 2 supporting deep linking, data-driven routes and more.
  go_router: ^6.0.1

  # A Flutter packages to use fonts from fonts.google.com
  google_fonts: ^5.0.0

  # This plugin allows Flutter desktop apps to defines system tray.
  tray_manager: ^0.2.0

  # Flutter plugin for getting commonly used locations on host platform file systems, such as the
  # temp and app data directories.
  path_provider: ^2.0.12

  # A cross platform plugin for displaying and scheduling local notifications for Flutter applications
  # with the ability to customize for each platform.
  flutter_local_notifications: ^13.0.0

  # The Font Awesome Icon pack available as Flutter Icons. Provides 1600 additional icons to use
  # in your apps.
  font_awesome_flutter: ^10.4.0

  # An SVG rendering and widget library for Flutter, which allows painting and displaying Scalable Vector Graphics 1.1 files.
  flutter_svg: ^2.0.5

  # Flutter plugin for SQLite, a self-contained, high-reliability, embedded, SQL database engine.
  sqflite: ^2.2.8+4

  # Provides a collection of Flutter grids layouts (staggered, masonry, quilted, woven, etc.).
  flutter_staggered_grid_view: ^0.6.2

  # Photo View provides a gesture sensitive zoomable widget. Photo View is largely used to show
  # interactive images and other stuff such as SVG.
  photo_view: ^0.14.0

  # Render After Effects animations natively on Flutter. This package is a pure Dart implementation
  # of a Lottie player.
  lottie: ^2.4.0

  # This plugin allows Flutter desktop apps to automatically update themselves (based on sparkle and winsparkle).
  auto_updater: ^0.1.7

  # Flutter plugin for querying information about the application package, such as CFBundleVersion
  # on iOS or versionCode on Android.
  package_info_plus: ^4.0.2

dev_dependencies:
  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^2.0.1

  # Tools to write binaries that run builders.
  build_runner: ^2.4.5

  # A mock framework inspired by Mockito.
  mockito: ^5.4.2

  # Automatically generate code for converting to and from JSON by annotating Dart classes.
  json_serializable: ^6.7.0

  # Value types with builders, Dart classes as enums, and serialization.
  # This library is the runtime dependency.
  built_value: ^8.6.1

  # The typesafe, reactive and lightweight SQLite abstraction.
  floor_generator: ^1.4.2

  # A testing library which make it easy to test blocs.
  bloc_test: ^9.1.0

  # This package provides a library that performs static analysis of Dart code.
  analyzer: ^5.13.0

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  assets:
    - assets/translations/
    - assets/fake_json/
    - assets/images/
    - assets/animations/
    - assets/audio/

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/custom-fonts/#from-packages
